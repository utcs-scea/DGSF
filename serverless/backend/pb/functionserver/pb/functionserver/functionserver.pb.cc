// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/functionserver/functionserver.proto

#include "pb/functionserver/functionserver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace functionserver {
constexpr CreateRequest::CreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kernelimagepath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kernelargs_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , imagename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , imagestorageprefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , inetdev_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nameserver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , awsaccesskeyid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , awssecretaccesskey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vmtype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initrdpath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpu_(int64_t{0})
  , mem_(int64_t{0})
  , numreplica_(0u){}
struct CreateRequestDefaultTypeInternal {
  constexpr CreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRequestDefaultTypeInternal() {}
  union {
    CreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
constexpr CreateReply::CreateReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vmid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateReplyDefaultTypeInternal {
  constexpr CreateReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateReplyDefaultTypeInternal() {}
  union {
    CreateReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateReplyDefaultTypeInternal _CreateReply_default_instance_;
constexpr ReleaseRequest::ReleaseRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vmid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ReleaseRequestDefaultTypeInternal {
  constexpr ReleaseRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReleaseRequestDefaultTypeInternal() {}
  union {
    ReleaseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReleaseRequestDefaultTypeInternal _ReleaseRequest_default_instance_;
}  // namespace functionserver
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pb_2ffunctionserver_2ffunctionserver_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pb_2ffunctionserver_2ffunctionserver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pb_2ffunctionserver_2ffunctionserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pb_2ffunctionserver_2ffunctionserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, kernelimagepath_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, kernelargs_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, initrdpath_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, imagename_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, imagestorageprefix_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, inetdev_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, nameserver_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, awsaccesskeyid_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, awssecretaccesskey_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, cpu_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, mem_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, numreplica_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateRequest, vmtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateReply, ip_),
  PROTOBUF_FIELD_OFFSET(::functionserver::CreateReply, vmid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::functionserver::ReleaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::functionserver::ReleaseRequest, vmid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::functionserver::CreateRequest)},
  { 18, -1, sizeof(::functionserver::CreateReply)},
  { 25, -1, sizeof(::functionserver::ReleaseRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::functionserver::_CreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::functionserver::_CreateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::functionserver::_ReleaseRequest_default_instance_),
};

const char descriptor_table_protodef_pb_2ffunctionserver_2ffunctionserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&pb/functionserver/functionserver.proto"
  "\022\016functionserver\032\033google/protobuf/empty."
  "proto\"\226\002\n\rCreateRequest\022\027\n\017kernelImagePa"
  "th\030\004 \001(\t\022\022\n\nkernelArgs\030\005 \001(\t\022\022\n\ninitrdPa"
  "th\030\021 \001(\t\022\021\n\timageName\030\006 \001(\t\022\032\n\022imageStor"
  "agePrefix\030\007 \001(\t\022\017\n\007inetDev\030\010 \001(\t\022\022\n\nname"
  "Server\030\t \001(\t\022\026\n\016awsAccessKeyID\030\n \001(\t\022\032\n\022"
  "awsSecretAccessKey\030\013 \001(\t\022\013\n\003cpu\030\r \001(\003\022\013\n"
  "\003mem\030\016 \001(\003\022\022\n\nnumReplica\030\017 \001(\r\022\016\n\006vmType"
  "\030\020 \001(\t\"\'\n\013CreateReply\022\n\n\002ip\030\001 \001(\t\022\014\n\004vmi"
  "d\030\002 \001(\t\"\036\n\016ReleaseRequest\022\014\n\004vmid\030\001 \001(\t2"
  "\245\001\n\010Function\022M\n\rCreateReplica\022\035.function"
  "server.CreateRequest\032\033.functionserver.Cr"
  "eateReply\"\000\022J\n\016ReleaseVMSetup\022\036.function"
  "server.ReleaseRequest\032\026.google.protobuf."
  "Empty\"\000BK\n\037io.grpc.examples.functionserv"
  "erB\023FunctionServerProtoP\001Z\021./;functionse"
  "rverb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto = {
  false, false, 692, descriptor_table_protodef_pb_2ffunctionserver_2ffunctionserver_2eproto, "pb/functionserver/functionserver.proto", 
  &descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_once, descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_pb_2ffunctionserver_2ffunctionserver_2eproto::offsets,
  file_level_metadata_pb_2ffunctionserver_2ffunctionserver_2eproto, file_level_enum_descriptors_pb_2ffunctionserver_2ffunctionserver_2eproto, file_level_service_descriptors_pb_2ffunctionserver_2ffunctionserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_getter() {
  return &descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pb_2ffunctionserver_2ffunctionserver_2eproto(&descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto);
namespace functionserver {

// ===================================================================

class CreateRequest::_Internal {
 public:
};

CreateRequest::CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:functionserver.CreateRequest)
}
CreateRequest::CreateRequest(const CreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kernelimagepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kernelimagepath().empty()) {
    kernelimagepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kernelimagepath(), 
      GetArenaForAllocation());
  }
  kernelargs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kernelargs().empty()) {
    kernelargs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kernelargs(), 
      GetArenaForAllocation());
  }
  imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagename().empty()) {
    imagename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imagename(), 
      GetArenaForAllocation());
  }
  imagestorageprefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagestorageprefix().empty()) {
    imagestorageprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imagestorageprefix(), 
      GetArenaForAllocation());
  }
  inetdev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inetdev().empty()) {
    inetdev_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inetdev(), 
      GetArenaForAllocation());
  }
  nameserver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nameserver().empty()) {
    nameserver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nameserver(), 
      GetArenaForAllocation());
  }
  awsaccesskeyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_awsaccesskeyid().empty()) {
    awsaccesskeyid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_awsaccesskeyid(), 
      GetArenaForAllocation());
  }
  awssecretaccesskey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_awssecretaccesskey().empty()) {
    awssecretaccesskey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_awssecretaccesskey(), 
      GetArenaForAllocation());
  }
  vmtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vmtype().empty()) {
    vmtype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vmtype(), 
      GetArenaForAllocation());
  }
  initrdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_initrdpath().empty()) {
    initrdpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initrdpath(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cpu_, &from.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&numreplica_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(numreplica_));
  // @@protoc_insertion_point(copy_constructor:functionserver.CreateRequest)
}

inline void CreateRequest::SharedCtor() {
kernelimagepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kernelargs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
imagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
imagestorageprefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
inetdev_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
nameserver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
awsaccesskeyid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
awssecretaccesskey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vmtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
initrdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&numreplica_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(numreplica_));
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:functionserver.CreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  kernelimagepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernelargs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagestorageprefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inetdev_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nameserver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awsaccesskeyid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  awssecretaccesskey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vmtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initrdpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRequest::ArenaDtor(void* object) {
  CreateRequest* _this = reinterpret_cast< CreateRequest* >(object);
  (void)_this;
}
void CreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:functionserver.CreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kernelimagepath_.ClearToEmpty();
  kernelargs_.ClearToEmpty();
  imagename_.ClearToEmpty();
  imagestorageprefix_.ClearToEmpty();
  inetdev_.ClearToEmpty();
  nameserver_.ClearToEmpty();
  awsaccesskeyid_.ClearToEmpty();
  awssecretaccesskey_.ClearToEmpty();
  vmtype_.ClearToEmpty();
  initrdpath_.ClearToEmpty();
  ::memset(&cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numreplica_) -
      reinterpret_cast<char*>(&cpu_)) + sizeof(numreplica_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string kernelImagePath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_kernelimagepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateRequest.kernelImagePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kernelArgs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_kernelargs();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateRequest.kernelArgs"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imageName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_imagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateRequest.imageName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imageStoragePrefix = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_imagestorageprefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateRequest.imageStoragePrefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inetDev = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_inetdev();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateRequest.inetDev"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nameServer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_nameserver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateRequest.nameServer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string awsAccessKeyID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_awsaccesskeyid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateRequest.awsAccessKeyID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string awsSecretAccessKey = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_awssecretaccesskey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateRequest.awsSecretAccessKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cpu = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mem = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          mem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 numReplica = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          numreplica_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vmType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_vmtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateRequest.vmType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initrdPath = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_initrdpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateRequest.initrdPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:functionserver.CreateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string kernelImagePath = 4;
  if (!this->_internal_kernelimagepath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kernelimagepath().data(), static_cast<int>(this->_internal_kernelimagepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateRequest.kernelImagePath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_kernelimagepath(), target);
  }

  // string kernelArgs = 5;
  if (!this->_internal_kernelargs().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kernelargs().data(), static_cast<int>(this->_internal_kernelargs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateRequest.kernelArgs");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_kernelargs(), target);
  }

  // string imageName = 6;
  if (!this->_internal_imagename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imagename().data(), static_cast<int>(this->_internal_imagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateRequest.imageName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_imagename(), target);
  }

  // string imageStoragePrefix = 7;
  if (!this->_internal_imagestorageprefix().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imagestorageprefix().data(), static_cast<int>(this->_internal_imagestorageprefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateRequest.imageStoragePrefix");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_imagestorageprefix(), target);
  }

  // string inetDev = 8;
  if (!this->_internal_inetdev().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inetdev().data(), static_cast<int>(this->_internal_inetdev().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateRequest.inetDev");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_inetdev(), target);
  }

  // string nameServer = 9;
  if (!this->_internal_nameserver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nameserver().data(), static_cast<int>(this->_internal_nameserver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateRequest.nameServer");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_nameserver(), target);
  }

  // string awsAccessKeyID = 10;
  if (!this->_internal_awsaccesskeyid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_awsaccesskeyid().data(), static_cast<int>(this->_internal_awsaccesskeyid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateRequest.awsAccessKeyID");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_awsaccesskeyid(), target);
  }

  // string awsSecretAccessKey = 11;
  if (!this->_internal_awssecretaccesskey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_awssecretaccesskey().data(), static_cast<int>(this->_internal_awssecretaccesskey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateRequest.awsSecretAccessKey");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_awssecretaccesskey(), target);
  }

  // int64 cpu = 13;
  if (this->_internal_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_cpu(), target);
  }

  // int64 mem = 14;
  if (this->_internal_mem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_mem(), target);
  }

  // uint32 numReplica = 15;
  if (this->_internal_numreplica() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_numreplica(), target);
  }

  // string vmType = 16;
  if (!this->_internal_vmtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vmtype().data(), static_cast<int>(this->_internal_vmtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateRequest.vmType");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_vmtype(), target);
  }

  // string initrdPath = 17;
  if (!this->_internal_initrdpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initrdpath().data(), static_cast<int>(this->_internal_initrdpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateRequest.initrdPath");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_initrdpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:functionserver.CreateRequest)
  return target;
}

size_t CreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:functionserver.CreateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string kernelImagePath = 4;
  if (!this->_internal_kernelimagepath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelimagepath());
  }

  // string kernelArgs = 5;
  if (!this->_internal_kernelargs().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kernelargs());
  }

  // string imageName = 6;
  if (!this->_internal_imagename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imagename());
  }

  // string imageStoragePrefix = 7;
  if (!this->_internal_imagestorageprefix().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imagestorageprefix());
  }

  // string inetDev = 8;
  if (!this->_internal_inetdev().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inetdev());
  }

  // string nameServer = 9;
  if (!this->_internal_nameserver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nameserver());
  }

  // string awsAccessKeyID = 10;
  if (!this->_internal_awsaccesskeyid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_awsaccesskeyid());
  }

  // string awsSecretAccessKey = 11;
  if (!this->_internal_awssecretaccesskey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_awssecretaccesskey());
  }

  // string vmType = 16;
  if (!this->_internal_vmtype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vmtype());
  }

  // string initrdPath = 17;
  if (!this->_internal_initrdpath().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initrdpath());
  }

  // int64 cpu = 13;
  if (this->_internal_cpu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cpu());
  }

  // int64 mem = 14;
  if (this->_internal_mem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mem());
  }

  // uint32 numReplica = 15;
  if (this->_internal_numreplica() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numreplica());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRequest::GetClassData() const { return &_class_data_; }

void CreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateRequest *>(to)->MergeFrom(
      static_cast<const CreateRequest &>(from));
}


void CreateRequest::MergeFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:functionserver.CreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_kernelimagepath().empty()) {
    _internal_set_kernelimagepath(from._internal_kernelimagepath());
  }
  if (!from._internal_kernelargs().empty()) {
    _internal_set_kernelargs(from._internal_kernelargs());
  }
  if (!from._internal_imagename().empty()) {
    _internal_set_imagename(from._internal_imagename());
  }
  if (!from._internal_imagestorageprefix().empty()) {
    _internal_set_imagestorageprefix(from._internal_imagestorageprefix());
  }
  if (!from._internal_inetdev().empty()) {
    _internal_set_inetdev(from._internal_inetdev());
  }
  if (!from._internal_nameserver().empty()) {
    _internal_set_nameserver(from._internal_nameserver());
  }
  if (!from._internal_awsaccesskeyid().empty()) {
    _internal_set_awsaccesskeyid(from._internal_awsaccesskeyid());
  }
  if (!from._internal_awssecretaccesskey().empty()) {
    _internal_set_awssecretaccesskey(from._internal_awssecretaccesskey());
  }
  if (!from._internal_vmtype().empty()) {
    _internal_set_vmtype(from._internal_vmtype());
  }
  if (!from._internal_initrdpath().empty()) {
    _internal_set_initrdpath(from._internal_initrdpath());
  }
  if (from._internal_cpu() != 0) {
    _internal_set_cpu(from._internal_cpu());
  }
  if (from._internal_mem() != 0) {
    _internal_set_mem(from._internal_mem());
  }
  if (from._internal_numreplica() != 0) {
    _internal_set_numreplica(from._internal_numreplica());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:functionserver.CreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {
  return true;
}

void CreateRequest::InternalSwap(CreateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kernelimagepath_, GetArenaForAllocation(),
      &other->kernelimagepath_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kernelargs_, GetArenaForAllocation(),
      &other->kernelargs_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &imagename_, GetArenaForAllocation(),
      &other->imagename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &imagestorageprefix_, GetArenaForAllocation(),
      &other->imagestorageprefix_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &inetdev_, GetArenaForAllocation(),
      &other->inetdev_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nameserver_, GetArenaForAllocation(),
      &other->nameserver_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &awsaccesskeyid_, GetArenaForAllocation(),
      &other->awsaccesskeyid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &awssecretaccesskey_, GetArenaForAllocation(),
      &other->awssecretaccesskey_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vmtype_, GetArenaForAllocation(),
      &other->vmtype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &initrdpath_, GetArenaForAllocation(),
      &other->initrdpath_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRequest, numreplica_)
      + sizeof(CreateRequest::numreplica_)
      - PROTOBUF_FIELD_OFFSET(CreateRequest, cpu_)>(
          reinterpret_cast<char*>(&cpu_),
          reinterpret_cast<char*>(&other->cpu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_getter, &descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_once,
      file_level_metadata_pb_2ffunctionserver_2ffunctionserver_2eproto[0]);
}

// ===================================================================

class CreateReply::_Internal {
 public:
};

CreateReply::CreateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:functionserver.CreateReply)
}
CreateReply::CreateReply(const CreateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  vmid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vmid().empty()) {
    vmid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vmid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:functionserver.CreateReply)
}

inline void CreateReply::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vmid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateReply::~CreateReply() {
  // @@protoc_insertion_point(destructor:functionserver.CreateReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vmid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateReply::ArenaDtor(void* object) {
  CreateReply* _this = reinterpret_cast< CreateReply* >(object);
  (void)_this;
}
void CreateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:functionserver.CreateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  vmid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateReply.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vmid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vmid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.CreateReply.vmid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:functionserver.CreateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateReply.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // string vmid = 2;
  if (!this->_internal_vmid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vmid().data(), static_cast<int>(this->_internal_vmid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.CreateReply.vmid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vmid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:functionserver.CreateReply)
  return target;
}

size_t CreateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:functionserver.CreateReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string vmid = 2;
  if (!this->_internal_vmid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vmid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateReply::GetClassData() const { return &_class_data_; }

void CreateReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateReply *>(to)->MergeFrom(
      static_cast<const CreateReply &>(from));
}


void CreateReply::MergeFrom(const CreateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:functionserver.CreateReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_vmid().empty()) {
    _internal_set_vmid(from._internal_vmid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateReply::CopyFrom(const CreateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:functionserver.CreateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateReply::IsInitialized() const {
  return true;
}

void CreateReply::InternalSwap(CreateReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vmid_, GetArenaForAllocation(),
      &other->vmid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_getter, &descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_once,
      file_level_metadata_pb_2ffunctionserver_2ffunctionserver_2eproto[1]);
}

// ===================================================================

class ReleaseRequest::_Internal {
 public:
};

ReleaseRequest::ReleaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:functionserver.ReleaseRequest)
}
ReleaseRequest::ReleaseRequest(const ReleaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vmid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vmid().empty()) {
    vmid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vmid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:functionserver.ReleaseRequest)
}

inline void ReleaseRequest::SharedCtor() {
vmid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReleaseRequest::~ReleaseRequest() {
  // @@protoc_insertion_point(destructor:functionserver.ReleaseRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReleaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vmid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseRequest::ArenaDtor(void* object) {
  ReleaseRequest* _this = reinterpret_cast< ReleaseRequest* >(object);
  (void)_this;
}
void ReleaseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReleaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:functionserver.ReleaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vmid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_vmid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "functionserver.ReleaseRequest.vmid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:functionserver.ReleaseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vmid = 1;
  if (!this->_internal_vmid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vmid().data(), static_cast<int>(this->_internal_vmid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "functionserver.ReleaseRequest.vmid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vmid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:functionserver.ReleaseRequest)
  return target;
}

size_t ReleaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:functionserver.ReleaseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vmid = 1;
  if (!this->_internal_vmid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vmid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleaseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReleaseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleaseRequest::GetClassData() const { return &_class_data_; }

void ReleaseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ReleaseRequest *>(to)->MergeFrom(
      static_cast<const ReleaseRequest &>(from));
}


void ReleaseRequest::MergeFrom(const ReleaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:functionserver.ReleaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vmid().empty()) {
    _internal_set_vmid(from._internal_vmid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleaseRequest::CopyFrom(const ReleaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:functionserver.ReleaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseRequest::IsInitialized() const {
  return true;
}

void ReleaseRequest::InternalSwap(ReleaseRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vmid_, GetArenaForAllocation(),
      &other->vmid_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_getter, &descriptor_table_pb_2ffunctionserver_2ffunctionserver_2eproto_once,
      file_level_metadata_pb_2ffunctionserver_2ffunctionserver_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace functionserver
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::functionserver::CreateRequest* Arena::CreateMaybeMessage< ::functionserver::CreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::functionserver::CreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::functionserver::CreateReply* Arena::CreateMaybeMessage< ::functionserver::CreateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::functionserver::CreateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::functionserver::ReleaseRequest* Arena::CreateMaybeMessage< ::functionserver::ReleaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::functionserver::ReleaseRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
